function latexCode = LatexifyResult(results)

tabular = {'\t\t\\begin{tabular}{\n%s\n\t\t\t}\n%s\n%s\n\t\t\\end{tabular}'};
columns = { ...
    'l %% Name', ...
    'l %% Property', ...
    '%%r %% Depth', ...
    '%%r %% States', ...
    'r@{.}l %% Transitions', ...
    'r@{.}l %% Memory', ...
    'r@{.}l %% Time', ...
    };
header = { ...
    'Specification &', ...
    'Type & ', ...
    '%%\\multicolumn{1}{l}{Depth} & ', ...
    '%%\\multicolumn{1}{l}{States} & ', ...
    '\\multicolumn{2}{l}{Transitions} & ', ...
    '\\multicolumn{2}{l}{Memory [MB]} & ', ...
    '\\multicolumn{2}{l}{Time [s]} %%& ', ...
    '%%\\multicolumn{1}{l}{R}', ...
    '\\\\', ...
    '\\hline%%', ...
    };

item = { ...
    '%% %s', ...
    '%s &', ...
    '%s & %% Property', ...
    '%%%s & %% Depth', ...
    '%%%s & %% States', ...
    '%s & %% Transitions', ...
    '%s & %% Memory', ...
    '%s %% & Time', ...
    '%%%s %% Errors', ...
    };

itemtext = strjoin(PrependIndent(PrependIndent(item, 3, 1), 1, 2), '\n');

items = cell(size(results, 1), 1);

for i = 1:size(results,1)
    
    name = results{i,1};
    type = results{i,2};
    depth = results{i,3};
    states = Convert2Scientific(results{i,4}, 1);
    transitions = Convert2Scientific(results{i,5}, 2);
    memory = Convert2Float(results{i,6}, 1);
    time = Convert2Float(results{i,7}, 1);
    errors = results{i,8};
    
    items{i} = sprintf(itemtext, name, name, type, depth, states, transitions, memory, time, errors);
    
end

columntext = strjoin(PrependIndent(columns, 4, 1), '\n');
headertext = strjoin(PrependIndent(header, 3, 1), '\n');
itemstext = strjoin(items, '\n\t\t\t\t\\\\\n');

latexCode = sprintf(tabular{1}, sprintf(columntext), sprintf(headertext), itemstext);

end

function newStr = Convert2Scientific(oldStr, precision)

num = str2double(oldStr);
string = sprintf(['%.', num2str(precision), 'e'], num);
newStr = strrep(string, '.', '&');

end

function newStr = Convert2Float(oldStr, precision)

num = str2double(oldStr);
string = sprintf(['%.', num2str(precision), 'f'], num);
newStr = strrep(string, '.', '&');

end

function indented = PrependIndent(unindented, num, startindex)

indented = unindented;
indent = repmat('\t', 1, num);

for i = startindex:numel(indented)
    indented{i} = [indent, indented{i}];
end

end